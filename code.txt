#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define BUTTON_MOVE_PIN 2
#define BUTTON_X_PIN 3
#define BUTTON_O_PIN 4

int board[3][3]; // 0 = empty, 1 = X, 2 = O
int cursorX = 0;
int cursorY = 0;
bool gameOver = false;
int winner = 0;
bool cursorMoved = false;
int gridSize = 21; // Define gridSize globally

void setup() {
  pinMode(BUTTON_MOVE_PIN, INPUT_PULLUP);
  pinMode(BUTTON_X_PIN, INPUT_PULLUP);
  pinMode(BUTTON_O_PIN, INPUT_PULLUP);
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  // Display "Vadeendra Karanam\nTic Tac Toe"
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(20, 20);
  display.println("Vadeendra Karanam");
  display.println("Tic Tac Toe");
  display.display();
  
  delay(2000); // Wait for 2 seconds
  
  // Clear display before starting the game
  display.clearDisplay();
  display.display();
  
  // Initialize the game
  resetGame();
}

void loop() {
  if (gameOver) {
    displayWinner();
    delay(2000); // Wait for 2 seconds
    resetGame();
    return;
  }

  if (digitalRead(BUTTON_MOVE_PIN) == LOW) {
    delay(200); // Debounce
    moveCursor();
    cursorMoved = true;
  } else {
    cursorMoved = false;
  }
  
  if (digitalRead(BUTTON_X_PIN) == LOW) {
    delay(200); // Debounce
    placeMark(1); // Place X
  }
  
  if (digitalRead(BUTTON_O_PIN) == LOW) {
    delay(200); // Debounce
    placeMark(2); // Place O
  }
  
  drawBoard();
}

void drawBoard() {
  display.clearDisplay();
  
  int gridOffsetX = (SCREEN_WIDTH - (3 * gridSize)) / 2;
  int gridOffsetY = (SCREEN_HEIGHT - (3 * gridSize)) / 2;
  
  for (int i = 0; i < 4; i++) {
    display.drawLine(gridOffsetX + i * gridSize, gridOffsetY, gridOffsetX + i * gridSize, gridOffsetY + 3 * gridSize, SSD1306_WHITE);
    display.drawLine(gridOffsetX, gridOffsetY + i * gridSize, gridOffsetX + 3 * gridSize, gridOffsetY + i * gridSize, SSD1306_WHITE);
  }
  
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (board[x][y] == 1) {
        display.drawLine(gridOffsetX + x * gridSize + 1, gridOffsetY + y * gridSize + 1, gridOffsetX + x * gridSize + gridSize - 1, gridOffsetY + y * gridSize + gridSize - 1, SSD1306_WHITE);
        display.drawLine(gridOffsetX + x * gridSize + gridSize - 1, gridOffsetY + y * gridSize + 1, gridOffsetX + x * gridSize + 1, gridOffsetY + y * gridSize + gridSize - 1, SSD1306_WHITE);
      } else if (board[x][y] == 2) {
        display.drawCircle(gridOffsetX + x * gridSize + gridSize / 2, gridOffsetY + y * gridSize + gridSize / 2, gridSize / 2 - 1, SSD1306_WHITE);
      }
    }
  }
  
  if (!gameOver) {
    if (cursorMoved) {
      display.drawRect(gridOffsetX + cursorX * gridSize, gridOffsetY + cursorY * gridSize, gridSize, gridSize, SSD1306_WHITE);
    } else {
      display.drawRect(gridOffsetX + cursorX * gridSize + 2, gridOffsetY + cursorY * gridSize + 2, gridSize - 4, gridSize - 4, SSD1306_WHITE);
    }
  }
  
  display.display();
}

void moveCursor() {
  int prevCursorX = cursorX;
  int prevCursorY = cursorY;
  
  cursorX++;
  if (cursorX >= 3) {
    cursorX = 0;
    cursorY++;
    if (cursorY >= 3) {
      cursorY = 0;
    }
  }
  
  // Highlight the previous and current cursor positions
  int gridOffsetX = (SCREEN_WIDTH - (3 * gridSize)) / 2;
  int gridOffsetY = (SCREEN_HEIGHT - (3 * gridSize)) / 2;
  
  display.fillRect(gridOffsetX + prevCursorX * gridSize + 2, gridOffsetY + prevCursorY * gridSize + 2, gridSize - 4, gridSize - 4, SSD1306_BLACK);
  display.drawRect(gridOffsetX + cursorX * gridSize, gridOffsetY + cursorY * gridSize, gridSize, gridSize, SSD1306_WHITE);
}

void placeMark(int player) {
  if (board[cursorX][cursorY] == 0) {
    board[cursorX][cursorY] = player;
    if (checkWin(player)) {
      gameOver = true;
      winner = player;
    } else if (isBoardFull()) {
      gameOver = true;
      winner = 0; // Draw
    }
  }
}

bool checkWin(int player) {
  // Check rows and columns
  for (int i = 0; i < 3; i++) {
    if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
        (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
      // Draw a line across the winning row or column
      display.drawLine(getPixelCoordinate(i, 0), getPixelCoordinate(i, 0), getPixelCoordinate(i, 2) + gridSize - 1, getPixelCoordinate(i, 2) + gridSize - 1, SSD1306_WHITE);
      return true;
    }
  }
  
  // Check diagonals
  if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
      (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
    // Draw a line across the winning diagonal
    display.drawLine(getPixelCoordinate(0, 0), getPixelCoordinate(0, 0), getPixelCoordinate(2, 2) + gridSize - 1, getPixelCoordinate(2, 2) + gridSize - 1, SSD1306_WHITE);
    return true;
  }
  
  return false;
}

bool isBoardFull() {
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (board[x][y] == 0) {
        return false;
      }
    }
  }
  return true;
}

void displayWinner() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 20);
  if (winner == 1) {
    display.print("X Wins!");
  } else if (winner == 2) {
    display.print("O Wins!");
  } else {
    display.print("Draw!");
  }
  display.display();
}

void resetGame() {
  cursorX = 0;
  cursorY = 0;
  gameOver = false;
  winner = 0;
  memset(board, 0, sizeof(board));
  drawBoard();
}

int getPixelCoordinate(int x, int y) {
  int gridOffsetX = (SCREEN_WIDTH - (3 * gridSize)) / 2;
  int gridOffsetY = (SCREEN_HEIGHT - (3 * gridSize)) / 2;
  return gridOffsetX + x * gridSize;
}